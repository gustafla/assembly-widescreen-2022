#![allow(clippy::all)]
#[macro_use]
pub mod macros;
pub mod buffer;
pub mod error;
pub mod framebuffer;
pub mod program;
pub mod renderbuffer;
pub mod resource_mapper;
pub mod shader;
pub mod texture;
pub mod uniform_value;

pub use self::buffer::Buffer;
pub use self::error::*;
pub use self::framebuffer::{Framebuffer, RenderbufferAttachment, TextureAttachment};
pub use self::program::Program;
pub use self::renderbuffer::Renderbuffer;
pub use self::resource_mapper::ResourceMapper;
pub use self::shader::Shader;
pub use self::texture::Texture;
pub use self::uniform_value::UniformValue;
pub use types::*;

// Generated by gl_generator. See build.rs
include!(concat!(env!("OUT_DIR"), "/gles2_bindings.rs"));

pub fn get_info_log(
    handle: GLuint,
    get_iv: unsafe extern "system" fn(GLuint, GLenum, *mut GLint),
    get_il: unsafe extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar),
) -> String {
    use std::ffi::CString;

    let mut log_len = 0;
    unsafe {
        get_iv(handle, INFO_LOG_LENGTH, &mut log_len);
    }

    let mut log = vec![0; log_len as usize];

    let mut got_len = 0;
    unsafe {
        get_il(
            handle,
            log_len,
            &mut got_len,
            log.as_mut_ptr() as *mut GLchar,
        );
    }

    log.truncate(got_len as usize);

    CString::new(log).unwrap().into_string().unwrap()
}

pub fn enable(name: GLenum) {
    unsafe {
        Enable(name);
    }
}

pub fn disable(name: GLenum) {
    unsafe {
        Disable(name);
    }
}

pub fn viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
    unsafe {
        Viewport(x, y, width, height);
    }
}

pub fn blend_func(sfactor: GLenum, dfactor: GLenum) {
    unsafe {
        BlendFunc(sfactor, dfactor);
    }
}

pub fn depth_func(func: GLenum) {
    unsafe {
        DepthFunc(func);
    }
}

pub fn get_booleanv(name: GLenum) -> bool {
    let mut value = FALSE;
    unsafe {
        GetBooleanv(name, &mut value);
    }
    value == TRUE
}

pub fn get_integerv(name: GLenum) -> GLint {
    let mut value = 0;
    unsafe {
        GetIntegerv(name, &mut value);
    }
    value
}

pub fn clear_color(r: f32, g: f32, b: f32, a: f32) {
    unsafe {
        ClearColor(r, g, b, a);
    }
}

pub fn depth_mask(flag: bool) {
    unsafe {
        DepthMask(if flag { TRUE } else { FALSE });
    }
}
