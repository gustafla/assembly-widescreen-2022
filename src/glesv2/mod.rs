#[macro_use]
mod macros;
mod buffer;
mod error;
mod framebuffer;
mod program;
mod renderbuffer;
mod resource_mapper;
mod shader;
mod texture;
mod uniform_value;

pub use self::buffer::Buffer;
pub use self::error::*;
pub use self::framebuffer::{Framebuffer, RenderbufferAttachment, TextureAttachment};
pub use self::program::Program;
pub use self::renderbuffer::Renderbuffer;
pub use self::resource_mapper::ResourceMapper;
pub use self::shader::Shader;
pub use self::texture::Texture;
pub use self::uniform_value::UniformValue;
use std::ffi::CString;
use std::rc::Rc;
use types::*;

// Generated by gl_generator. See build.rs
include!(concat!(env!("OUT_DIR"), "/gles2_bindings.rs"));

pub type RcGl = Rc<Gles2>;

pub fn get_info_log(
    gl: RcGl,
    handle: GLuint,
    get_iv: unsafe fn(&Gles2, GLuint, GLenum, *mut GLint),
    get_il: unsafe fn(&Gles2, GLuint, GLsizei, *mut GLsizei, *mut GLchar),
) -> String {
    let mut log_len = 0;
    unsafe {
        get_iv(&gl, handle, INFO_LOG_LENGTH, &mut log_len);
    }

    let mut log = vec![0; log_len as usize];

    let mut got_len = 0;
    unsafe {
        get_il(
            &gl,
            handle,
            log_len,
            &mut got_len,
            log.as_mut_ptr() as *mut GLchar,
        );
    }

    log.truncate(got_len as usize);

    CString::new(log).unwrap().into_string().unwrap()
}
